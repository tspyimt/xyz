(function (e) {
    function n(t, n) {
        function r(e) {
            if (c._componentInited && !c._playlistTransitionOn && !c.volumebarDown) {
                if (!c.seekBarDown) {
                    if (S) {
                        if (e = e.originalEvent.touches, !(e && 0 < e.length))return!1
                    } else e.preventDefault();
                    c.seekBarDown = !0;
                    c._doc.bind(w, function (e) {
                        e:{
                            var t;
                            if (S) {
                                if (e.originalEvent.touches && e.originalEvent.touches.length)t = e.originalEvent.touches; else if (e.originalEvent.changedTouches && e.originalEvent.changedTouches.length)t = e.originalEvent.changedTouches; else break e;
                                if (1 < t.length)break e;
                                t = t[0]
                            } else t = e;
                            e.preventDefault();
                            i(t.pageX)
                        }
                    });
                    c._doc.bind(E, function (e) {
                        e:if (c.seekBarDown) {
                            c.seekBarDown = !1;
                            c._doc.unbind(w).unbind(E);
                            var t;
                            if (S) {
                                if (e.originalEvent.touches && e.originalEvent.touches.length)t = e.originalEvent.touches; else if (e.originalEvent.changedTouches && e.originalEvent.changedTouches.length)t = e.originalEvent.changedTouches; else break e;
                                if (1 < t.length)break e;
                                t = t[0]
                            } else t = e;
                            e.preventDefault();
                            i(t.pageX)
                        }
                    })
                }
                return!1
            }
        }

        function i(e) {
            e -= c.progress_bg.offset().left;
            0 > e ? e = 0 : e > c.seekBarSize && (e = c.seekBarSize);
            c.progress_level.width(e);
            e = Math.max(0, Math.min(1, e / c.seekBarSize));
            if (c.html5Support) {
                e = (e * c.videoUp2Js.duration).toFixed(1);
                try {
                    c.videoUp2Js.currentTime = e
                } catch (t) {
                }
            }
        }

        function s() {
            c.videoInited && (c.player_progress_tooltip.css("display", "block"), c.player_progress.bind("mousemove", u).bind("mouseout", o), c._doc.bind("mouseout", o))
        }

        function o() {
            c.videoInited && (c.player_progress_tooltip.css("display", "none"), c.player_progress.unbind("mousemove", u).unbind("mouseout", o), c._doc.unbind("mouseout", o))
        }

        function u(e) {
            e = e.pageX - c.player_progress.offset().left;
            0 > e ? e = 0 : e > c.seekBarSize && (e = c.seekBarSize);
            var t = e + parseInt(c.player_progress.css("left"), 10) - c.player_progress_tooltip.width() / 2;
            c.player_progress_tooltip.css("left", t + "px");
            e = Math.max(0, Math.min(1, e / c.seekBarSize));
            if (c.html5Support) {
                e *= c.videoUp2Js.duration;
                if (isNaN(e))return;
                c.player_progress_tooltip_value.html(c.formatCurrentTime(e) + c.formatDuration(c.videoUp2Js.duration))
            }
            e = c.player_progress_tooltip.width() / 2 - c.player_progress_tooltip_value.width() / 2;
            c.player_progress_tooltip_value.css("left", e + "px")
        }

        function a(e) {
            if (c._componentInited && !c._playlistTransitionOn && !c.seekBarDown) {
                if (!c.volumebarDown) {
                    if (S) {
                        if (e = e.originalEvent.touches, !(e && 0 < e.length))return!1
                    } else e.preventDefault();
                    c.volumebarDown = !0;
                    c._doc.bind(w, function (e) {
                        e:{
                            var t;
                            if (S) {
                                if (e.originalEvent.touches && e.originalEvent.touches.length)t = e.originalEvent.touches; else if (e.originalEvent.changedTouches && e.originalEvent.changedTouches.length)t = e.originalEvent.changedTouches; else break e;
                                if (1 < t.length)break e;
                                t = t[0]
                            } else t = e;
                            e.preventDefault();
                            f(t.pageX)
                        }
                    });
                    c._doc.bind(E, function (e) {
                        e:if (c.volumebarDown) {
                            c.volumebarDown = !1;
                            c._doc.unbind(w).unbind(E);
                            var t;
                            if (S) {
                                if (e.originalEvent.touches && e.originalEvent.touches.length)t = e.originalEvent.touches; else if (e.originalEvent.changedTouches && e.originalEvent.changedTouches.length)t = e.originalEvent.changedTouches; else break e;
                                if (1 < t.length)break e;
                                t = t[0]
                            } else t = e;
                            e.preventDefault();
                            f(t.pageX);
                            0 == c.defaultVolume ? (c.player_volume.find("img").attr("src", c.ic_mute), c.videoUp2Js.muted = !0) : 0 < c.defaultVolume && (c.player_volume.find("img").attr("src", c.ic_volume), c.videoUp2Js.muted = !1)
                        }
                    })
                }
                return!1
            }
        }

        function f(e) {
            c.defaultVolume = Math.max(0, Math.min(1, (e - c.volume_bg.offset().left) / c.volumeSize));
            c._setVolume()
        }

        function l() {
            c.videoInited && (c.player_volume_tooltip.css("display", "block"), c.volume_seekbar.bind("mousemove", p).bind("mouseout", h), c._doc.bind("mouseout", h))
        }

        function h() {
            c.videoInited && (c.player_volume_tooltip.css("display", "none"), c.volume_seekbar.unbind("mousemove", p).unbind("mouseout", h), c._doc.unbind("mouseout", h))
        }

        function p(e) {
            e = e.pageX - c.volume_bg.offset().left;
            0 > e ? e = 0 : e > c.volumeSize && (e = c.volumeSize);
            var t = parseInt(c.playerControls.css("width"), 10) + e - parseInt(c.volume_seekbar.css("right"), 10) - parseInt(c.volume_seekbar.css("width"), 10) + parseInt(c.volume_bg.css("left"), 10) - c.player_volume_tooltip.width() / 2;
            c.player_volume_tooltip.css("left", t + "px");
            e = Math.max(0, Math.min(1, e / c.volumeSize));
            e = parseInt(100 * e, 10);
            c.player_volume_tooltip_value.html(e + " %");
            e = c.player_volume_tooltip.width() / 2 - c.player_volume_tooltip_value.width() / 2;
            c.player_volume_tooltip_value.css("left", e + "px")
        }

        function d() {
            c._playlistTransitionOn || (c.transitionFinishIntervalID && clearInterval(c.transitionFinishIntervalID), c.addressTimeoutID && clearTimeout(c.addressTimeoutID), c.onChange(c._externalChangeEvent))
        }

        function v() {
            c.addressTimeoutID && clearTimeout(c.addressTimeoutID);
            c.onChange(c._externalChangeEvent)
        }

        c = this;
        this.baseURL = window.location.href;
        this.settings = e.extend({}, e.fn.videoGallery.defaults, n);
        this.useRollovers = (this.isMobile = isMobile) ? !1 : !0;
        this.isIE = isIE;
        this.ieBelow9 = ieBelow9;
        this.isSafari = isSafari;
        this.ic_volume = "/img/data/icons/volume.png";
        this.ic_volume_on = "/img/data/icons/volume_on.png";
        this.ic_mute = "/img/data/icons/mute.png";
        this.ic_mute_on = "/img/data/icons/mute_on.png";
        this.ic_pause = "/img/data/icons/pause.png";
        this.ic_pause_on = "/img/data/icons/pause_on.png";
        this.ic_play = "/img/data/icons/play.png";
        this.ic_play_on = "/img/data/icons/play_on.png";
        this.ic_fullscreen_enter = "/img/data/icons/fullscreen_enter.png";
        this.ic_fullscreen_enter_on = "/img/data/icons/fullscreen_enter_on.png";
        this.ic_fullscreen_exit = "/img/data/icons/fullscreen_exit.png";
        this.ic_fullscreen_exit_on = "/img/data/icons/fullscreen_exit_on.png";
        this.ic_player_prev = "/img/data/icons/v_prev.png";
        this.ic_player_prev_on = "/img/data/icons/v_prev_on.png";
        this.ic_player_next = "/img/data/icons/v_next.png";
        this.ic_player_next_on = "/img/data/icons/v_next_on.png";
        this.ic_w_play = "/img/data/icons/w_play.png";
        this.ic_w_pause = "/img/data/icons/w_pause.png";
        this._componentInited = !1;
        this._body = e("body");
        this.bodyOverflowOrig = this._body.css("overflow");
        this._window = e(window);
        this._doc = e(document);
        this._windowResizeInterval = 100;
        this._windowResizeIntervalID;
        this._mediaPath;
        this._mediaType;
        this.preserveInsert = !1;
        this.preserveInsert_item;
        this._vimeoPlayer;
        this._youtubePlayer;
        this._youtubeChromeless = this._youtubeInited = this._vimeoInited = !1;
        this.scrollPane;
        this.scrollPaneApi;
        this.currentThumb;
        this.currentInfo;
        this._descriptionDataArr = [];
        this._processPlaylistLength;
        this._currentInsert;
        this.lastPlaylist;
        this._processPlaylistCounter = -1;
        this.liProcessArr = [];
        this._playlistArr = [];
        this.vimeoTypeArr = ["vimeo_single", "vimeo_user", "vimeo_group", "vimeo_channel", "vimeo_album"];
        this.youtubeTypeArr = "youtube_single youtube_playlist youtube_user_favourites youtube_user_uploads youtube_video_query youtube_playlist_query youtube_standard_feed youtube_user_videos youtube_channel_query youtube_user_playlists".split(" ");
        this._videoProcessData = [];
        this._playlistQueryCounter = 0;
        this._playlistQueryUrl = [];
        this._playlistQueryLength;
        this.ytType;
        this.currentObj;
        this._playlistLength;
        this._playlistTransitionOn = !1;
        this.playlistPosition = this.settings.playlistPosition;
        this.initialAutoplay = this.vim_autoPlay = this.yt_autoPlay = this.autoPlay = this.settings.autoPlay;
        this.useYoutubeHighestQuality = this.settings.useYoutubeHighestQuality;
        this._autoAdvanceToNextVideo = this.settings.autoAdvanceToNextVideo;
        this.fullSize = this.settings.fullSize;
        this.outputPlaylistData = this.settings.outputPlaylistData;
        this.margin_size = 0;
        this.autoMakePlaylistInfo = this.settings.autoMakePlaylistInfo;
        this.autoMakePlaylistThumb = this.settings.autoMakePlaylistThumb;
        this.randomPlay = this.settings.randomPlay;
        this.loopingOn = this.settings.loopingOn;
        this._activePlaylist = this.settings.activePlaylist;
        this.defaultVolume = this.settings.defaultVolume;
        0 > this.defaultVolume ? this.defaultVolume = 0 : 1 < this.defaultVolume && (this.defaultVolume = 1);
        this._thumbOrientation = this.settings.thumbOrientation;
        this.componentWrapper = e(t);
        this.mediaPreloader = this.componentWrapper.find(".mediaPreloader").css("display", "none");
        this.componentInnerWrapper = this.componentWrapper.find(".componentInnerWrapper");
        this.componentInnerWrapperOrigW = this.componentInnerWrapper.width();
        this.componentInnerWrapperOrigH = this.componentInnerWrapper.height();
        this.componentInnerWrapperCurrW = this.componentInnerWrapperOrigW;
        this.componentInnerWrapperCurrH = this.componentInnerWrapperOrigH;
        this.playlistHolder = this.componentWrapper.find(".playlistHolder");
        this.playlistHolderOrigW = this.playlistHolder.width();
        this.playlistHolderOrigH = this.playlistHolder.height();
        this.componentPlaylist = this.playlistHolder.find(".componentPlaylist");
        this.playlist_inner = this.playlistHolder.find(".playlist_inner");
        this.playerHolder = this.componentWrapper.find(".playerHolder");
        this.playerHolderOrigW = this.playerHolder.width();
        this.playerHolderOrigH = this.playerHolder.height();
        this.playerHolderCurrW = this.playerHolderOrigW;
        this.playerHolderCurrH = this.playerHolderOrigH;
        this.playerRatio = this.playerHolder.width() / this.playerHolder.height();
        this.mediaHolder = this.playerHolder.find(".mediaHolder").bind("click", function () {
            c.togglePlayBack();
            return!1
        });
        this.youtubeHolder = this.playerHolder.find(".youtubeHolder");
        this.vimeoHolder = this.playerHolder.find(".vimeoHolder");
        this.componentWrapper.find(".w_player_adv").length && (this.w_player_adv = this.componentWrapper.find(".w_player_adv"), this.w_prev = this.w_player_adv.find(".w_prev").css({cursor: "pointer"}).bind("click", function () {
            if (!c._componentInited || c._playlistTransitionOn)return!1;
            c.previousMedia();
            return!1
        }), c.w_next = c.w_player_adv.find(".w_next").css({cursor: "pointer"}).bind("click", function () {
            c.nextMedia();
            return!1
        }), this.componentWrapper.find(".w_player_adv").css("display", "block"));
        this.componentWrapper.find(".player_adv").length && (this.player_adv = this.componentWrapper.find(".player_adv"), this.player_prev = this.player_adv.find(".player_prev").css({cursor: "pointer"}).bind("click", function () {
            if (!c._componentInited || c._playlistTransitionOn)return!1;
            c.previousMedia();
            return!1
        }), this.useRollovers && this.player_prev.bind("mouseover",function () {
            if (!c._componentInited || c._playlistTransitionOn)return!1;
            e(this).find("img").attr("src", c.ic_player_prev_on);
            return!1
        }).bind("mouseout", function () {
                if (!c._componentInited || c._playlistTransitionOn)return!1;
                e(this).find("img").attr("src", c.ic_player_prev);
                return!1
            }), this.player_next = c.player_adv.find(".player_next").css({cursor: "pointer"}).bind("click", function () {
            c.nextMedia();
            return!1
        }), this.useRollovers && this.player_next.bind("mouseover",function () {
            if (!c._componentInited || c._playlistTransitionOn)return!1;
            e(this).find("img").attr("src", c.ic_player_next_on);
            return!1
        }).bind("mouseout", function () {
                if (!c._componentInited || c._playlistTransitionOn)return!1;
                e(this).find("img").attr("src", c.ic_player_next);
                return!1
            }));
        this._componentWidth = this._getComponentSize("w");
        this._componentHeight = this._getComponentSize("h");
        this.widthSizeLimit = "horizontal" == this._thumbOrientation ? 500 : 600;
        this.heightSizeLimit = "horizontal" == this._thumbOrientation ? 350 : 250;
        this.mobileLayout = !1;
        if (this.fullSize)"right" == this.playlistPosition ? this._componentHeight <= this.heightSizeLimit && (this.mobileLayout = !0) : "bottom" == this.playlistPosition && this._componentWidth <= this.widthSizeLimit && (this.mobileLayout = !0); else if (this._componentWidth <= this.widthSizeLimit || this._componentHeight <= this.heightSizeLimit)this.mobileLayout = !0;
        this.activeItem;
        this.playerControls = this.componentWrapper.find(".playerControls");
        this.playerControlsOrigL = parseInt(this.playerControls.css("left"), 10);
        this.player_mediaTime = this.componentWrapper.find(".player_mediaTime");
        this.isIOS = !1;
        var m = navigator.userAgent;
        if (-1 < m.indexOf("iPhone") || -1 < m.indexOf("iPod") || -1 < m.indexOf("iPad")) {
            this.isIOS = !0;
            var g = document.getElementsByTagName("meta"), y;
            if (navigator.userAgent.match(/iPhone|iPad/i)) {
                for (y = 0; y < g.length; y++)"viewport" == g[y].name && (g[y].content = "width=device-width, minimum-scale=1.0, maximum-scale=1.0");
                document.addEventListener("gesturestart", b, !1)
            }
            var b = function () {
                for (y = 0; y < g.length; y++)"viewport" == g[y].name && (g[y].content = "width=device-width, minimum-scale=0.25, maximum-scale=1.6")
            };
            this.aspectRatio = 1
        }
        (this.isiPhoneIpod = -1 < m.indexOf("iPhone") || -1 < m.indexOf("iPod")) && this.playerControls.remove();
        this.isAndroid = -1 < m.indexOf("Android");
        this.isMobile && (this.vim_autoPlay = this.yt_autoPlay = this.autoPlay = !1);
        this.vorbisSupport = this.canPlayVorbis();
        this.mp4Support = this.canPlayMP4();
        this.webMsupport = this.canPlayWebM();
        this.html5Support = !!document.createElement("video").canPlayType;
        this.fullscreenCount = 0;
        this.fullscreenPossible = !1;
        this.checkFullScreenSupport() && (this.fullscreenPossible = !0);
        if (this.fullscreenPossible)this._doc.on("fullscreenchange mozfullscreenchange webkitfullscreenchange", function () {
            c.setFullscreenIcon();
            "fullscreen" == c.componentSize && 0 < c.fullscreenCount && (c.componentSize = "normal", c.resizeComponent());
            c.fullscreenCount = 1
        });
        this.html5video_inited = !1;
        this.previewPoster;
        this.bigPlay;
        this.html5Support && (this.bigPlay = this.componentWrapper.find(".bigPlay").css("cursor", "pointer").bind("click", function () {
            c.togglePlayBack();
            return!1
        }));
        if (this.autoHideControls = this.isMobile ? !1 : !0)this.componentHit = !1, this.componentInnerWrapper.mouseenter(function (e) {
            componentHit = !0;
            c.showControls()
        }).mouseleave(function () {
                componentHit = !1;
                c.hideControls()
            });
        this.aspectRatio = 1;
        this.videoInited = !1;
        this._mediaPath;
        this.mediaPlaying = !1;
        this.flashReadyInterval = 100;
        this.flashReadyIntervalID;
        this.flashPreview = e(this.settings.flashHolder);
        this.flashCheckDone = !1;
        this.dataInterval = 100;
        this.dataIntervalID;
        this.mediaWidth;
        this.mediaHeight;
        this.componentSize = "normal";
        this.video;
        this.videoUp2Js;
        this.timeout = null;
        this.mediaPreview = this.componentWrapper.find(".mediaPreview").bind("click", function () {
            c.mediaPreview.css('display', 'none');
            c.togglePlayBack();
            return!1
        });
        var w = m = "", E = "", S;
        "ontouchstart"in window ? (S = !0, m = "touchstart.ap", w = "touchmove.ap", E = "touchend.ap") : (S = !1, m = "mousedown.ap", w = "mousemove.ap", E = "mouseup.ap");
        this.seekPercent;
        this.seekBarDown = !1;
        this.player_progress = this.componentWrapper.find(".player_progress");
        this.progress_bg = this.componentWrapper.find(".progress_bg");
        this.load_level = this.componentWrapper.find(".load_level");
        this.progress_level = this.componentWrapper.find(".progress_level");
        this.controlsMediaWidthDiff = 20;
        this.controlsSeekbarDiff = this._getControlsSeekbarDiff();
        this.seekBarSize = this.playerControls.width() - this.controlsSeekbarDiff;
        this.player_progress.css("cursor", "pointer").bind(m, function (e) {
            r(e);
            return!1
        });
        this.player_progress_tooltip = this.componentWrapper.find(".player_progress_tooltip").css("left", parseInt(this.player_progress.css("left"), 10) + "px");
        this.player_progress_tooltip_value = this.componentWrapper.find(".player_progress_tooltip_value");
        this.isMobile || this.player_progress.bind("mouseover", s);
        this.player_volume = this.componentWrapper.find(".player_volume");
        this._lastVolume = this.defaultVolume;
        this.volumebarDown = !1;
        this.volume_seekbar = this.componentWrapper.find(".volume_seekbar");
        this.volume_bg = this.componentWrapper.find(".volume_bg");
        this.volume_level = this.componentWrapper.find(".volume_level");
        this.volumeSize = this.volume_bg.width();
        this.volume_level.css("width", this.defaultVolume * this.volumeSize + "px");
        0 == this.defaultVolume ? (this._lastVolume = .5, this.player_volume.find("img").attr("src", this.ic_mute)) : 0 < this.defaultVolume && this.player_volume.find("img").attr("src", this.ic_volume);
        this.noTime = this.noVolume = !1;
        this.isIOS && (this.player_volume.css("display", "none"), this.volume_seekbar.css("display", "none"), this.player_mediaTime.css("right", "45px"), this.player_progress.width(this.player_progress.width() + 95), this.progress_bg.width(this.player_progress.width() - 20), this.controlsSeekbarDiff = 180, this.noVolume = !0);
        this.volume_seekbar.css("cursor", "pointer").bind(m, function (e) {
            a(e);
            return!1
        });
        this.player_volume_tooltip = this.componentWrapper.find(".player_volume_tooltip").css("left", parseInt(this.volume_seekbar.css("left"), 10) + "px");
        this.player_volume_tooltip_value = this.componentWrapper.find(".player_volume_tooltip_value");
        this.isMobile || this.volume_seekbar.bind("mouseover", l);
        this.html5Support || (this.mediaPreview.remove(), this.mp4Support = !0);
        this.player_playControl = this.componentWrapper.find(".player_playControl").css("cursor", "pointer").bind("click", function () {
            c.togglePlayBack();
            return!1
        });
        c.useRollovers && this.player_playControl.bind("mouseover",function () {
            c.mediaPlaying ? c.componentWrapper.find(".player_playControl").find("img").attr("src", c.ic_pause_on) : c.componentWrapper.find(".player_playControl").find("img").attr("src", c.ic_play_on);
            return!1
        }).bind("mouseout", function () {
                c.mediaPlaying ? c.componentWrapper.find(".player_playControl").find("img").attr("src", c.ic_pause) : c.componentWrapper.find(".player_playControl").find("img").attr("src", c.ic_play);
                return!1
            });
        this.player_volume.css("cursor", "pointer").bind("click", function () {
            0 == c.defaultVolume ? (c.defaultVolume = c._lastVolume, c.html5Support && (c.videoUp2Js.muted = !1), c._setVolume(), c.player_volume.find("img").attr("src", c.ic_volume)) : (c._lastVolume = c.defaultVolume, c.html5Support && (c.videoUp2Js.muted = !0), c.defaultVolume = 0, c._setVolume(), c.player_volume.find("img").attr("src", c.ic_mute));
            return!1
        });
        c.useRollovers && this.player_volume.bind("mouseover",function () {
            0 == c.defaultVolume ? c.player_volume.find("img").attr("src", c.ic_mute_on) : c.player_volume.find("img").attr("src", c.ic_volume_on);
            return!1
        }).bind("mouseout", function () {
                0 == c.defaultVolume ? c.player_volume.find("img").attr("src", c.ic_mute) : c.player_volume.find("img").attr("src", c.ic_volume);
                return!1
            });
        this.noFS = !1;
        this.player_fullscreen = this.componentWrapper.find(".player_fullscreen");
        this.html5Support && !this.fullscreenPossible && this.fullSize && (this.noFS = !0, this.player_fullscreen.css("display", "none"), this.no_fs_move = 25, this.player_mediaTime.css("right", parseInt(this.player_mediaTime.css("right"), 10) - this.no_fs_move + "px"), this.player_volume.css("right", parseInt(this.player_volume.css("right"), 10) - this.no_fs_move + "px"), this.volume_seekbar.css("right", parseInt(this.volume_seekbar.css("right"), 10) - this.no_fs_move + "px"));
        this.player_fullscreen.css("cursor", "pointer").bind("click", function () {
            c.toggleFullscreen(!0);
            return!1
        });
        c.useRollovers && this.player_fullscreen.bind("mouseover",function () {
            "normal" == c.componentSize ? c.player_fullscreen.find("img").attr("src", c.ic_fullscreen_enter_on) : c.player_fullscreen.find("img").attr("src", c.ic_fullscreen_exit_on);
            return!1
        }).bind("mouseout", function () {
                "normal" == c.componentSize ? c.player_fullscreen.find("img").attr("src", c.ic_fullscreen_enter) : c.player_fullscreen.find("img").attr("src", c.ic_fullscreen_exit);
                return!1
            });
        "horizontal" == this._thumbOrientation && this.playlistHolder.bind("mousewheel", function (e, t, n, r) {
            if (c._componentInited && !c._playlistTransitionOn)return c.scrollPaneApi && c.scrollPaneApi.scrollByX(100 * (0 < t ? -1 : 1)), !1
        });
        this._window.bind("resize", function () {
            c._windowResizeIntervalID && clearInterval(c._windowResizeIntervalID);
            c._windowResizeIntervalID = setTimeout(function () {
                c._doneResizing()
            }, c._windowResizeInterval);
            return!1
        });
        this._playlistManager = e.playlistManager({randomPlay: this.randomPlay, loopingOn: this.loopingOn});
        e(this._playlistManager).bind("ap_PlaylistManager.COUNTER_READY", function () {
            c.useDeeplink ? c._addressSet ? (c._addressSet = !1, c._disableActiveItem(), c._findMedia()) : (e.address.value(c.findAddress2(c._playlistManager.getCounter())), e.address.history() || e.address.history(!0)) : (c._disableActiveItem(), c._findMedia())
        });
        e(this._playlistManager).bind("ap_PlaylistManager.PLAYLIST_END", function () {
            c._disableActiveItem()
        });
        this.categoryArr = [];
        var x;
        this.playlist_inner.children("ul[data-address]").each(function () {
            var t = {};
            x = e(this);
            t.categoryName = x.attr("data-address");
            t.id = x.attr("id");
            c.categoryArr.push(t)
        });
        this.categoryLength = this.categoryArr.length;
        this.getDeeplinkData = !1;
        (this.useDeeplink = this.settings.useDeeplink) ? (this.strict = e.address.strict() ? "#/" : "#", this.dlink, this._activePlaylist, this.currentProcessDeeplink, this.secondLevelExist = !1, this.secondLevel, this.firstLevel, this.deepLink, this._addressInited = this._addressSet = !1, this.addressTimeout = 500, this.addressTimeoutID, this._externalChangeEvent, this.startUrl = this.settings.startUrl, this.activeCategory, this.currentCategory, this.activeItem, this.transitionFinishInterval = 100, this.transitionFinishIntervalID, e.address.internalChange(function (e) {
            e.stopPropagation();
            this.reCheckAddressTimeoutID && clearTimeout(this.reCheckAddressTimeoutID);
            c.onChange(e)
        }), e.address.externalChange(function (t) {
            t.stopPropagation();
            this.reCheckAddressTimeoutID && clearTimeout(this.reCheckAddressTimeoutID);
            c._externalChangeEvent = t;
            if (c._playlistTransitionOn)c.addressTimeoutID && clearTimeout(c.addressTimeoutID), c.transitionFinishIntervalID && clearInterval(c.transitionFinishIntervalID), c.transitionFinishIntervalID = setInterval(d, c.transitionFinishInterval); else if (c._addressInited)c.addressTimeoutID && clearTimeout(c.addressTimeoutID), c.addressTimeoutID = setTimeout(v, c.addressTimeout); else if ("/" == t.value)c._addressSet = !0, e.address.history(!1), c.isEmpty(c.startUrl) || (e.address.value(c.startUrl), e.address.history() || e.address.history(!0)); else if (c.isEmpty(t.value))c._addressSet = !0, e.address.history(!1), c.isEmpty(c.startUrl) || (e.address.value(c.startUrl), e.address.history() || e.address.history(!0)); else c.onChange(t)
        })) : (this._activePlaylist = this.settings.activePlaylist, this._getPlaylist());
        this._doneResizing()
    }

    n.prototype = {filterAllowedChars: function (e) {
        var t = e.length, n = "", r = 0, i, s;
        for (r; r < t; r++)if (i = e.charAt(r).toLowerCase(), "\\" == i && (i = "/"), s = this.getCharCode(i), s >= this.getCharCode("a") && s <= this.getCharCode("z") || s >= this.getCharCode("0") && s <= this.getCharCode("9") || 0 <= "_-".indexOf(i))n += i;
        return n
    }, getCharCode: function (e) {
        return e.charCodeAt(0)
    }, initAddress: function (e) {
        e.stopPropagation()
    }, onChange: function (t) {
        t.stopPropagation();
        this.slideshowTimeoutID && clearTimeout(this.slideshowTimeoutID);
        this._addressInited || (this._addressInited = !0);
        this.deepLink = t.value;
        "/" == this.deepLink.charAt(0) && (this.deepLink = this.deepLink.substring(1));
        "/" == this.deepLink.charAt(this.deepLink.length - 1) && (this.deepLink = this.deepLink.substring(0, this.deepLink.length - 1));
        t = this.findFirstLevel(this.deepLink);
        if (!this.findCategoryByName(t))return alert("404 page not found, check your deeplinks first level!"), e.address.history(!1), !1;
        this._addressSet = !1;
        void 0 == this.currentCategory || this.currentCategory != this.activeCategory ? this._getPlaylist() : this.secondLevel ? this.findCounterByName(this.secondLevel) ? this._playlistManager.getCounter() != this.activeItem ? (this._addressSet = !0, -1 != this._playlistManager.getCounter() && this._enableActiveItem(), this._playlistManager.setCounter(this.activeItem, !1)) : (this._disableActiveItem(), this._findMedia()) : (alert("404 page not found, check your deeplinks second level!"), e.address.history(!1)) : this.destroyMedia()
    }, findAddress: function (e) {
        e = e.split("/");
        var t = !1;
        2 != e.length && (t = !0);
        var n = e[0], r = !1, i = !1, s = 0, o = this.categoryArr.length;
        for (s; s < o; s++)if (this.categoryArr[s].categoryName == n) {
            this.activeCategory = s;
            r = !0;
            break
        }
        if (!r)return!1;
        if (t)for (media_name = e[1], s = 0, e = this.categoryArr[this.activeCategory].mediaName, o = e.length, s; s < o; s++)if (e[s] == media_name) {
            this.activeItem = s;
            i = !0;
            break
        }
        return r && i ? !0 : !1
    }, findCounterByName: function (e) {
        var t = !1, n = 0, r = this.categoryArr[this.activeCategory].mediaName, i = r.length;
        for (n; n < i; n++)if (r[n] == e) {
            this.activeItem = n;
            t = !0;
            break
        }
        return t ? !0 : !1
    }, findCounterByName2: function (e) {
        var t = 0, n = this.categoryArr[this.activeCategory].mediaName, r = n.length, i = -1;
        for (t; t < r; t++)if (n[t] == e) {
            i = t;
            break
        }
        return i
    }, findCategoryByName: function (e) {
        var t = !1, n = 0;
        for (n; n < this.categoryLength; n++)if (this.categoryArr[n].categoryName == e) {
            this.activeCategory = n;
            this._activePlaylist = this.categoryArr[n].id;
            t = !0;
            break
        }
        return t ? !0 : !1
    }, findAddress2: function (e) {
        return this.categoryArr[this.activeCategory].categoryName + "/" + this.categoryArr[this.activeCategory].mediaName[e]
    }, findFirstLevel: function (e) {
        var t;
        0 < e.indexOf("/") ? (this.secondLevelExist = !0, this.firstLevel = t = e.substr(0, e.indexOf("/")), this.secondLevel = e.substr(e.indexOf("/") + 1)) : (this.firstLevel = e, this.secondLevelExist = !1, this.secondLevel = null, t = e);
        return this.filterAllowedChars(t)
    }, isEmpty: function (e) {
        return 0 == e.replace(/^\s+|\s+$/g, "").length
    }, getDescription: function (e) {
        if (!this._componentInited || this._playlistTransitionOn)return!1;
        if (this.useDeeplink)if (e)if ("string" === typeof e)if (0 < e.indexOf("/")) {
            "/" == e.charAt(0) && (e = e.substring(1));
            "/" == e.charAt(e.length - 1) && (e = e.substring(0, e.length - 1));
            e = e.substring(e.lastIndexOf("/") + 1);
            if (-1 == this.findCounterByName2(e))return alert("Invalid value for getDescription Deeplink! Wrong deeplink!"), !1;
            e = this.findCounterByName2(e)
        } else return alert("Invalid value for getDescription Deeplink! Two level deeplink needed!"), !1; else return alert("Invalid value for getDescription Deeplink! String needed!"), !1; else {
            if (-1 == this._playlistManager.getCounter())return alert("No active Item for description, counter = -1"), !1;
            e = this._playlistManager.getCounter()
        } else if (e)if ("number" === typeof e)e > this._playlistLength - 1 ? e = this._playlistLength - 1 : 0 > e && (e = 0); else return alert("Invalid value loadMedia no Deeplink! Number needed!"), !1; else {
            if (-1 == this._playlistManager.getCounter())return alert("No active Item for description, counter = -1"), !1;
            e = this._playlistManager.getCounter()
        }
        return this._descriptionDataArr[e] ? this._descriptionDataArr[e] : null
    }, playMedia: function () {
        if (!this._componentInited || this._playlistTransitionOn || !this._mediaType)return!1;
        "local" == this._mediaType ? this.togglePlayBack() : "vimeo" == this._mediaType ? this._vimeoPlayer && this._vimeoPlayer.play() : "youtube" == this._mediaType && this._youtubePlayer && this._youtubePlayer.play();
        this.mediaPlaying = !0
    }, pauseMedia: function () {
        if (!this._componentInited || this._playlistTransitionOn || !this._mediaType)return!1;
        "local" == this._mediaType ? this.togglePlayBack() : "vimeo" == this._mediaType ? this._vimeoPlayer && this._vimeoPlayer.pause() : "youtube" == this._mediaType && this._youtubePlayer && this._youtubePlayer.pause();
        this.mediaPlaying = !1
    }, nextMedia: function () {
        if (!this._componentInited || this._playlistTransitionOn)return!1;
        this._enableActiveItem();
        this._playlistManager.advanceHandler(1, !0)
    }, previousMedia: function () {
        if (!this._componentInited || this._playlistTransitionOn)return!1;
        this._enableActiveItem();
        this._playlistManager.advanceHandler(-1, !0)
    }, loadMedia: function (t) {
        if (this._componentInited && !this._playlistTransitionOn)if (this.useDeeplink)if ("string" === typeof t)e.address.value(t); else return alert("Invalid value loadMedia Deeplink!"), !1; else if ("number" === typeof t)0 > t ? t = 0 : t > this._playlistLength - 1 && (t = this._playlistLength - 1), this._enableActiveItem(), this._playlistManager.processPlaylistRequest(t); else if ("string" === typeof t)this._activePlaylist = t, this._getPlaylist(); else return alert("Invalid value loadMedia no Deeplink!"), !1
    }, destroyMedia: function () {
        this._componentInited && this._mediaType && (this._cleanMedia(), this._mediaType = null, this._enableActiveItem(), this._playlistManager.reSetCounter(), this.mediaPreloader && this.mediaPreloader.css("display", "none"))
    }, setVolume: function (e) {
        if (!this._componentInited || this._playlistTransitionOn || !this._mediaType)return!1;
        0 > e ? e = 0 : 1 < e && (e = 1);
        this.defaultVolume = e;
        this._setVolume()
    }, loadPreview: function () {
        var t = this;
        this.mediaPreview.css("display", "block");
        this.mediaPreloader && this.mediaPreloader.css("display", "block");
        var n = this.activeItem.attr("data-poster") + "?rand=" + Math.floor(99999999 * Math.random());
        this.previewPoster = e(new Image).css({position: "absolute", display: "block", opacity: 0}).appendTo(this.mediaPreview).load(function () {
            t._resizeControls();
            t.mediaPreloader && t.mediaPreloader.css("display", "none");
            t.resizePreview();
            t.previewPoster.animate({opacity: 1}, {duration: 500, easing: "easeOutSine"});
//      t.bigPlay && t.bigPlay.css("display", "none");
        }).attr("src", n).error(function (e) {
            })
    }, togglePlayBack: function () {
        if (-1 == this._playlistManager.getCounter())return!1;
        var e = this;
        this.videoInited || this.autoPlay ? this.html5Support ? this.videoUp2Js.paused ? this.videoUp2Js.play() : this.videoUp2Js.pause() : "undefined" !== typeof this.getFlashMovie("flashPreview") && "undefined" !== typeof this.getFlashMovie("flashPreview").pb_togglePlayback && this.getFlashMovie("flashPreview").pb_togglePlayback() : (this.previewPoster && this.previewPoster.stop().animate({opacity: 0}, {duration: 500, easing: "easeOutSine", complete: function () {
            e.previewPoster.remove();
            e.previewPoster = null
        }}), this.html5Support ? this._initLocal() : ("undefined" !== typeof this.getFlashMovie("flashPreview") && "undefined" !== typeof this.getFlashMovie("flashPreview").pb_play && this.getFlashMovie("flashPreview").pb_play(this._mediaPath, this.aspectRatio), this._resizeControls()));
        this.videoInited = !0;
        return!1
    }, flashResizeControls: function () {
        this._resizeControls()
    }, flashMainPreviewOff: function () {
        "undefined" !== typeof this.getFlashMovie("flashPreview") && ("undefined" !== typeof this.getFlashMovie("flashPreview").pb_play && this.getFlashMovie("flashPreview").pb_play(this._mediaPath, this.aspectRatio), this.videoInited = !0)
    }, flashVideoPause: function () {
        this.mediaPlaying = !1
    }, flashVideoResume: function () {
        this.mediaPlaying = !0
    }, flashVideoEnd: function () {
        this._mediaAdvance()
    }, flashVideoStart: function () {
        this.videoInited = !0;
        this.showControls()
    }, dataUpdateFlash: function (e, t, n, r) {
    }, getFlashMovie: function (e) {
        return-1 != navigator.appName.indexOf("Microsoft") ? window[e] : document[e]
    }, showControls: function () {
        this.videoInited && (this.html5Support ? this.playerControls.css("display", "block") : "undefined" !== typeof this.getFlashMovie("flashPreview") && "undefined" !== typeof this.getFlashMovie("flashPreview").pb_toggleControls && this.getFlashMovie("flashPreview").pb_toggleControls(!0))
    }, hideControls: function () {
        this.html5Support ? this.playerControls.css("display", "none") : "undefined" !== typeof this.getFlashMovie("flashPreview") && "undefined" !== typeof this.getFlashMovie("flashPreview").pb_toggleControls && this.getFlashMovie("flashPreview").pb_toggleControls(!1)
    }, resizeComponent: function () {
        window.__resizePlayerControls = function(){
            this.playerControls.css("left", "10000px");
            this._getComponentSize("w");
            this._getComponentSize("h");
            "fullscreen" == this.componentSize ? (this._body.css("overflow", "hidden"), this.playlistHolder.css("display", "none"), this.componentWrapper.find(".player_adv").css("display", "none"), this.componentWrapper.find(".w_player_adv").css("display", "none"), this.playerHolder.css({width: "", height: ""}).removeClass("playerHolder").addClass("playerHolder_fs")) : (this._body.css("overflow", this.bodyOverflowOrig), this.playerHolder.removeClass("playerHolder_fs").addClass("playerHolder"), this.playlistHolder.css("display", "block"), this.componentWrapper.find(".player_adv").css("display", "block"), this.componentWrapper.find(".w_player_adv").css("display", "block"));
            this.previewPoster && this.resizePreview();
            this.html5Support && this.videoInited && this.resizeVideo();
            this._resizeControls();
            this.playerControls.css("left", this.playerControlsOrigL + "px")
        };
        __resizePlayerControls();
    }, resizePreview: function () {
        if (this.previewPoster) {
            var e, t, n, r = this.previewPoster;
            0 != this.aspectRatio && (1 == this.aspectRatio ? e = this.retrieveObjectRatio(!0, r) : 2 == this.aspectRatio && (e = this.retrieveObjectRatio(!1, r)));
            "normal" == this.componentSize ? (t = (this._getPlayerSize("w") - e.width) / 2, n = (this._getPlayerSize("h") - e.height) / 2) : (t = (this._getComponentSize("w") - e.width) / 2, n = (this._getComponentSize("h") - e.height) / 2);
            r.css({width: e.width + "px", height: e.height + "px", left: t + "px", top: n + "px"})
        }
    }, resizeVideo: function () {
        if (this.video) {
            var e, t, n;
            0 == this.aspectRatio ? e = this.getMediaSize() : 1 == this.aspectRatio ? e = this.retrieveObjectRatio(!0) : 2 == this.aspectRatio && (e = this.retrieveObjectRatio(!1));
            "normal" == this.componentSize ? (t = (this._getPlayerSize("w") - e.width) / 2, n = (this._getPlayerSize("h") - e.height) / 2) : (t = (this._getComponentSize("w") - e.width) / 2, n = (this._getComponentSize("h") - e.height) / 2);
            this.video.css({width: e.width + "px", height: e.height + "px", left: t + "px", top: n + "px"})
        }
    }, retrieveObjectRatio: function (e, t) {
        if ("normal" == this.componentSize)var n = this._getPlayerSize("w"), r = this._getPlayerSize("h"); else n = this._getComponentSize("w"), r = this._getComponentSize("h");
        var i, s, o = {};
        t ? (i = t.width(), s = t.height()) : (t = this.getMediaSize(), i = t.width, s = t.height);
        var u = (n - 0) / (r - 0), a = i / s;
        a < u ? e ? (o.width = (r - 0) / s * i, o.height = r - 0) : (o.height = (n - 0) / i * s, o.width = n - 0) : a > u ? e ? (o.height = (n - 0) / i * s, o.width = n - 0) : (o.width = (r - 0) / s * i, o.height = r - 0) : (o.width = n - 0, o.height = r - 0);
        return o
    }, getMediaSize: function () {
        var e = {};
        this.videoUp2Js ? (e.width = this.videoUp2Js.videoWidth, e.height = this.videoUp2Js.videoHeight) : (e.width = this._getPlayerSize("w"), e.height = this._getPlayerSize("h"));
        return e
    }, resetData: function () {
        this.player_mediaTime.html("00:00 | 00:00");
        this.progress_level.css("width", "0px");
        this.load_level.css("width", "0px")
    }, canPlayVorbis: function () {
        var e = document.createElement("video");
        return!(!e.canPlayType || !e.canPlayType('video/ogg; codecs="theora, vorbis"').replace(/no/, ""))
    }, canPlayMP4: function () {
        var e = document.createElement("video");
        return!(!e.canPlayType || !e.canPlayType('video/mp4; codecs="avc1.42E01E, mp4a.40.2"').replace(/no/, ""))
    }, canPlayWebM: function () {
        var e = document.createElement("video");
        return!(!e.canPlayType || !e.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/no/, ""))
    }, formatCurrentTime: function (e) {
        e = Math.round(e);
        minutes = Math.floor(e / 60);
        minutes = 10 <= minutes ? minutes : "0" + minutes;
        e = Math.floor(e % 60);
        return minutes + ":" + (10 <= e ? e : "0" + e)
    }, formatDuration: function (e) {
        e = Math.round(e);
        minutes = Math.floor(e / 60);
        minutes = 10 <= minutes ? minutes : "0" + minutes;
        e = Math.floor(e % 60);
        return" | " + minutes + ":" + (10 <= e ? e : "0" + e)
    }, setFullscreenIcon: function () {
        document.fullScreenElement && null !== document.fullScreenElement || !document.mozFullScreen && !document.webkitIsFullScreen ? this.player_fullscreen.children("img").attr("src", this.ic_fullscreen_enter) : this.player_fullscreen.children("img").attr("src", this.ic_fullscreen_exit)
    }, fullScreenStatus: function () {
        return document.fullscreen || document.mozFullScreen || document.webkitIsFullScreen
    }, toggleFullscreen: function (e) {
        this.fullscreenCount = 0;
        "normal" == this.componentSize ? (this.componentSize = "fullscreen", this.fullscreenPossible || this.componentWrapper.find(".player_fullscreen").find("img").attr("src", this.ic_fullscreen_exit)) : (this.componentSize = "normal", this.fullscreenPossible || this.componentWrapper.find(".player_fullscreen").find("img").attr("src", this.ic_fullscreen_enter));
        if (this.fullscreenPossible || this.html5Support)document.fullScreenElement && null !== document.fullScreenElement || !document.mozFullScreen && !document.webkitIsFullScreen ? document.documentElement.requestFullScreen ? document.documentElement.requestFullScreen() : document.documentElement.mozRequestFullScreen ? document.documentElement.mozRequestFullScreen() : document.documentElement.webkitRequestFullScreen && document.documentElement.webkitRequestFullScreen() : document.cancelFullScreen ? document.cancelFullScreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitCancelFullScreen && document.webkitCancelFullScreen();
        this.fullscreenPossible ? "normal" == this.componentSize && e && this.resizeComponent() : this.resizeComponent()
    }, checkFullScreenSupport: function () {
        var e = !1;
        document.documentElement.requestFullScreen ? e = !0 : document.documentElement.mozRequestFullScreen ? e = !0 : document.documentElement.webkitRequestFullScreen && (e = !0);
        return e
    }, _checkScroll: function (e) {
        "horizontal" == this._thumbOrientation && this._setPlaylistSize(0 == e ? 0 : this.margin_size);
        this.scrollPaneApi ? (this.scrollPaneApi.reinitialise(), "vertical" == this._thumbOrientation ? this.scrollPaneApi.scrollToY(0) : this.scrollPaneApi.scrollToX(0)) : (this.scrollPane = this.playlist_inner, this.scrollPane.jScrollPane({verticalDragMinHeight: 60, verticalDragMaxHeight: 60, horizontalDragMinWidth: 60, horizontalDragMaxWidth: 60}), this.scrollPaneApi = this.scrollPane.data("jsp"), this.scrollPane.bind("jsp-initialised", function (e, t) {
        }))
    }, _setPlaylistSize: function (t) {
        if (this._playlistArr[0] && this._playlistLength && this.lastPlaylist && "horizontal" == this._thumbOrientation) {
            var n = e(this._playlistArr[0]), r = parseInt(n.outerWidth(), 10);
            t = this._playlistLength * r + (this._playlistLength - 1) * parseInt(n.css("marginRight"), 10) + t;
            this.isIE && this.ieBelow9 && (t += 3);
            this.lastPlaylist.css("width", t + "px")
        }
    }, _getPlaylist: function () {
        this._playlistTransitionOn = !0;
        var t = this, n = 0, r;
        if (this.lastPlaylist) {
            this._cleanMedia();
            for (n; n < this._playlistLength; n++)r = e(this._playlistArr[n]), r.css("cursor", "pointer"), r.removeClass("playlistSelected").addClass("playlistNonSelected");
            this.lastPlaylist.css("display", "none")
        }
        this.html5video_inited = !1;
        this._descriptionDataArr = [];
        this._playlistLength = 0;
        this._processPlaylistCounter = -1;
        this.liProcessArr = [];
        this._playlistArr = [];
        "horizontal" == this._thumbOrientation && (n = e("<div/>").addClass("playlistNonSelected").hide().appendTo(this.componentPlaylist), this.margin_size = parseInt(n.css("marginRight"), 10) + 1, n.remove(), n = null);
        n = e(this.playlistHolder.find("ul[id=" + this._activePlaylist + "]")).css("display", "block");
        if (0 == n.length)return alert("Failed playlist selection! No playlist with id: " + this._activePlaylist), this._playlistTransitionOn = !1;
        this.lastPlaylist = n;
        this.currentCategory = this.activeCategory;
        this.deeplinkData = [];
        this.useDeeplink && (this.getDeeplinkData = !1, this.useDeeplink || this.activeCategory || (this.activeCategory = n.index()), this.categoryArr[this.activeCategory].mediaName || (this.getDeeplinkData = !0, this.categoryArr[this.activeCategory].mediaName = []));
        void 0 != n.attr("data-set") && "true" == n.attr("data-set") ? (n.children("li[class=playlistNonSelected]").each(function () {
            t._playlistArr.push(e(this))
        }), this._playlistLength = this._playlistArr.length, this._playlistManager.setPlaylistItems(this._playlistLength), this._checkScroll(0), this._playlistTransitionOn = !1, this._checkPlaylistSize(), this.outputPlaylistData && this._getPlaylistData(), this.useDeeplink ? this.secondLevelExist && (this.findCounterByName(this.secondLevel) ? (this._addressSet = !0, this._playlistManager.setCounter(this.activeItem, !1)) : (alert("404 page not found, check your deeplinks second level!"), e.address.history(!1))) : (n = this.settings.activeItem, n > this._playlistLength - 1 && (n = this._playlistLength - 1), -1 < n && this._playlistManager.setCounter(n, !1))) : (this.liProcessArr = n.children("li"), this._processPlaylistLength = this.liProcessArr.length, this._checkPlaylistProcess())
    }, _getPlaylistData: function () {
        this.dlink = this.baseURL + this.strict + this.firstLevel + "/";
        var e, t, n = 0, r = this._playlistArr.length, i;
        for (n; n < r; n++)i = this._playlistArr[n], t = i.attr("data-type"), "local" == t ? (this.mp4Support ? e = i.attr("data-mp4") : this.vorbisSupport ? e = i.attr("data-ogv") : this.webMsupport && (e = i.attr("data-webm")), t = e.lastIndexOf("/") ? e.substr(e.lastIndexOf("/") + 1) : e, this.deeplinkData.push({id: n + 1, name: t, type: "local", "video-id": e, deeplink: this.useDeeplink ? this.dlink + i.attr("data-address") : "undefined"})) : this.deeplinkData.push({id: n + 1, name: i.attr("data-title") ? i.attr("data-title") : "", type: i.attr("data-type"), "video-id": i.attr("data-path"), deeplink: this.useDeeplink ? this.dlink + i.attr("data-address") : "undefined"});
        try {
            console.log(this.deeplinkData)
        } catch (s) {
        }
    }, _checkPlaylistProcess: function () {
        this._checkScroll();
        this._processPlaylistCounter++;
        if (this._processPlaylistCounter < this._processPlaylistLength)this._videoProcessData = [], this._processPlaylistItem(); else {
            var t = this;
            if (!this.flashCheckDone)if (this.flashCheckDone = !0, this.html5Support)this.flashPreview.remove(); else {
                document.getElementById("flashPreview").style.display = "block";
                this.flashReadyIntervalID = setInterval(function () {
                    "undefined" !== typeof t.getFlashMovie("flashPreview").setData && (t.flashReadyIntervalID && clearInterval(t.flashReadyIntervalID), t.getFlashMovie("flashPreview").setData(t.settings, t.seekBarSize, t.volumeSize, t.controlsMediaWidthDiff, t.isMobile, t.noVolume, t.initialAutoplay), t._checkPlaylistProcess());
                    0 == t.componentWrapper.find(".bigPlay").length && "undefined" !== typeof t.getFlashMovie("flashPreview").pb_removeBigPlay && t.getFlashMovie("flashPreview").pb_removeBigPlay();
                    t.componentWrapper.find(".bigPlay").remove();
                    0 == t.componentWrapper.find(".playerControls").length && "undefined" !== typeof t.getFlashMovie("flashPreview").pb_removeControls && t.getFlashMovie("flashPreview").pb_removeControls();
                    t.componentWrapper.find(".playerControls").remove()
                }, this.flashReadyInterval);
                return
            }
            this.lastPlaylist.attr("data-set", "true");
            this._playlistTransitionOn = !1;
            this._playlistLength = this._playlistArr.length;
            this._playlistManager.setPlaylistItems(this._playlistLength);
            this.outputPlaylistData && this._getPlaylistData();
            "vertical" == this._thumbOrientation ? e(this._playlistArr[this._playlistLength - 1]).css("marginBottom", "0px") : e(this._playlistArr[this._playlistLength - 1]).css("marginRight", "0px");
            this._checkScroll(0);
            this._checkPlaylistSize();
            this._componentInited || (this._componentInited = !0, this.settings.videoGallerySetupDone.call(this));
            if (this.useDeeplink)this.secondLevelExist && (this.findCounterByName(this.secondLevel) ? (this._addressSet = !0, this._playlistManager.setCounter(this.activeItem, !1)) : (alert("404 page not found, check your deeplinks second level!"), e.address.history(!1))); else {
                var n = this.settings.activeItem;
                n > this._playlistLength - 1 && (n = this._playlistLength - 1);
                -1 < n && this._playlistManager.setCounter(n, !1)
            }
        }
    }, _processPlaylistItem: function () {
        var t, n, r;
        t = e(this.liProcessArr[this._processPlaylistCounter]);
        n = t.attr("data-type");
        r = t.attr("data-path");
        this.currentInfo = this.currentThumb = null;
        "local" == n ? (this._playlistLength += 1, t.css({cursor: "pointer", display: "block"}), this._playlistArr.push(t), t.attr("data-id", this._playlistLength - 1), t.data({mp4: t.attr("data-mp4"), ogv: t.attr("data-ogv"), webm: t.attr("data-webm"), poster: t.attr("data-poster")}), this._addPlaylistMouseEvents(t), this.mobileLayout && t.removeClass("playlistNonSelected").addClass("playlistNonSelected_mob").css({cursor: "pointer", display: "block"}), 0 < t.find("div[class='playlistInfo']").length && (t.find("div[class='playlistInfo']").dotdotdot(), this._descriptionDataArr[this._playlistLength - 1] = t.find("div[class='playlistContent']").html()), this.useDeeplink && this.getDeeplinkData && (t = this.filterAllowedChars(t.attr("data-address")), this.categoryArr[this.activeCategory].mediaName.push(t)), this._checkPlaylistProcess()) : this._contains(this.vimeoTypeArr, n) ? (this.autoMakePlaylistThumb || (this.currentThumb = t.find("div[class='playlistThumb']"), this.currentInfo = t.find("div[class='playlistInfo']")), this._currentInsert = t, t.css("display", "none"), this.currentObj = {}, this.useDeeplink && (this.currentObj.deeplink = t.attr("data-address")), this._processVimeo(n, r)) : this._contains(this.youtubeTypeArr, n) && ("youtube_playlist" == n && r.search("/PL"), this.autoMakePlaylistThumb || (this.currentThumb = t.find("div[class='playlistThumb']"), this.currentInfo = t.find("div[class='playlistInfo']")), this.ytType = n, "youtube_channel_query" == n ? (this.preserveInsert_item = t, this.preserveInsert = !0) : this._currentInsert = t, t.css("display", "none"), this.currentObj = {}, this.useDeeplink && (this.currentObj.deeplink = t.attr("data-address")), this._processYoutube(n, r))
    }, _contains: function (e, t) {
        for (var n = e.length; n--;)if (e[n] === t)return!0;
        return!1
    }, _processYoutube: function (e, t) {
        var n = this;
        "youtube_single" == e ? this._processYoutubeSingle(t) : "youtube_playlist" != e && "youtube_user_favourites" != e && "youtube_user_uploads" != e && "youtube_video_query" != e && "youtube_playlist_query" != e && "youtube_standard_feed" != e && "youtube_user_videos" != e && "youtube_user_playlists" != e && "youtube_channel_query" != e ? alert("Invalid data-type in playlist!") : jQuery.ajax({url: t, dataType: "jsonp", success: function (e) {
            n._processYotubeSuccess(e)
        }, error: function (e) {
            n._processYotubeError(e)
        }})
    }, _processYoutubeSingle: function (e) {
        var t = this;
        jQuery.ajax({url: e, dataType: "jsonp", success: function (e) {
            t._processYotubeSingleSuccess(e)
        }, error: function (e) {
            t._processYotubeError(e)
        }})
    }, _processYoutubePlaylistQuery: function () {
        var e = this;
        jQuery.ajax({url: this._playlistQueryUrl[this._playlistQueryCounter], dataType: "jsonp", success: function (t) {
            e._processYoutubePlaylistQuerySuccess(t)
        }, error: function (t) {
            e._processYotubeError(t)
        }})
    }, _processYoutubePlaylistQuerySuccess: function (e) {
        if (e.error)alert(e.error.message); else {
            var t = e.data.items.length, n = 0, r, i;
            for (n; n < t; n++)(i = e.data.items[n].video) && i.accessControl && (r = {type: "youtube"}, this.useDeeplink && (r.deeplink = this.currentObj.deeplink + (n + 1).toString()), r.id = i.id, r.title = i.title ? i.title : "", r.description = i.description ? i.description : "", i.thumbnail && (r.thumbnail = i.thumbnail.hqDefault ? i.thumbnail.hqDefault : i.thumbnail.sqDefault), this._videoProcessData.push(r));
            this._playlistQueryCounter++;
            this._playlistQueryCounter > this._playlistQueryLength - 1 ? this._buildPlaylist() : this._processYoutubePlaylistQuery()
        }
    }, _processYotubeSuccess: function (t) {
        if (t.error)alert(t.error.message); else {
            var n = this;
            if ("youtube_channel_query" == this.ytType) {
                var r, i, s = document.createElement("ul"), o, u, a = 0, f = n._processPlaylistCounter, l = n.liProcessArr[n._processPlaylistCounter];
                n.useDeeplink && n.currentObj.deeplink && (u = n.currentObj.deeplink);
                e(t).find("entry").each(function () {
                    o = e(this).children("yt\\:channelId").text();
                    r = "<li data-type='youtube_user_uploads' data-path='http://gdata.youtube.com/feeds/api/users/" + o + "/uploads?start-index=1&max-results=50&v=2&format=5&alt=jsonc' ></li>";
                    if (u) {
                        var t = " data-address='" + u + "' ";
                        match = r.match(/\>/);
                        r = r.slice(0, match.index) + t + r.slice(match.index)
                    }
                    s.innerHTML = r;
                    i = s.firstChild;
                    n.liProcessArr.splice(f + 1, 0, e(i));
                    f++;
                    a++
                });
                n._processPlaylistLength += a;
                n._processPlaylistCounter += 1;
                n._processPlaylistItem()
            } else {
                var c = t.data.items.length, a = 0, h;
                if ("youtube_playlist_query" == this.ytType || "youtube_user_playlists" == this.ytType) {
                    this._playlistQueryCounter = 0;
                    this._playlistQueryUrl = [];
                    this._playlistQueryLength = c;
                    for (a; a < c; a++)l = "http://gdata.youtube.com/feeds/api/playlists/" + t.data.items[a].id + "?&start-index=1&max-results=50&v=2&format=5&alt=jsonc", this._playlistQueryUrl.push(l);
                    this._processYoutubePlaylistQuery()
                } else {
                    for (a; a < c; a++)(l = "youtube_user_uploads" == this.ytType || "youtube_video_query" == this.ytType || "youtube_standard_feed" == this.ytType ? t.data.items[a] : t.data.items[a].video) && l.accessControl && (h = {type: "youtube"}, this.useDeeplink && (h.deeplink = this.currentObj.deeplink + (a + 1).toString()), h.id = l.id, h.title = l.title ? l.title : "", h.description = l.description ? l.description : "", l.thumbnail && (h.thumbnail = l.thumbnail.hqDefault ? l.thumbnail.hqDefault : l.thumbnail.sqDefault), this._videoProcessData.push(h));
                    this._buildPlaylist()
                }
            }
        }
    }, _processYotubeSingleSuccess: function (e) {
        var t = {};
        (e = e.data) && e.accessControl ? (t.type = "youtube", this.useDeeplink && (t.deeplink = this.currentObj.deeplink), t.id = e.id, t.title = e.title ? e.title : "", t.description = e.description ? e.description : "", e.thumbnail && (t.thumbnail = e.thumbnail.hqDefault ? e.thumbnail.hqDefault : e.thumbnail.sqDefault), this._videoProcessData.push(t), this._buildPlaylist()) : checkPlaylistProcess()
    }, _processYotubeError: function (e) {
    }, _processVimeo: function (e, t) {
        var n = this;
        "vimeo_single" == e ? this._processVimeoSingle(t) : "vimeo_user" != e && "vimeo_group" != e && "vimeo_channel" != e && "vimeo_album" != e ? alert("Invalid data-type in playlist!") : jQuery.ajax({url: t, dataType: "jsonp", success: function (e) {
            n._processVimeoSuccess(e)
        }, error: function (e) {
            n._processVimeoError(e)
        }})
    }, _processVimeoSingle: function (e) {
        var t = this;
        jQuery.ajax({url: e, dataType: "jsonp", success: function (e) {
            t._processVimeoSingleSuccess(e)
        }, error: function (e) {
            t._processVimeoError(e)
        }})
    }, _processVimeoSuccess: function (e) {
        var t = e.length, n = 0, r;
        for (n; n < t; n++)"anywhere" === e[n].embed_privacy && (r = {type: "vimeo"}, this.useDeeplink && (r.deeplink = this.currentObj.deeplink + (n + 1).toString()), r.id = e[n].id, e[n].title && (r.title = e[n].title), e[n].description && (r.description = e[n].description), e[n].thumbnail_medium && (r.thumbnail = e[n].thumbnail_medium), this._videoProcessData.push(r));
        this._buildPlaylist()
    }, _processVimeoSingleSuccess: function (e) {
        if ("anywhere" === e[0].embed_privacy) {
            var t = {type: "vimeo"};
            this.useDeeplink && (t.deeplink = this.currentObj.deeplink);
            t.id = e[0].id;
            e[0].title && (t.title = e[0].title);
            e[0].description && (t.description = e[0].description);
            e[0].thumbnail_medium && (t.thumbnail = e[0].thumbnail_medium);
            this._videoProcessData.push(t);
            this._buildPlaylist()
        } else this._checkPlaylistProcess()
    }, _processVimeoError: function (e) {
        alert(e)
    }, _addPlaylistMouseEvents: function (t) {
        var n = this;
        t.bind("click", function (t) {
            if (!n._componentInited || n._playlistTransitionOn)return!1;
            t || (t = n._window.event);
            t.cancelBubble ? t.cancelBubble = !0 : t.stopPropagation && t.stopPropagation();
            t = e(t.currentTarget).attr("data-id");
            if (t != n._playlistManager.getCounter())return n._enableActiveItem(), n._playlistManager.processPlaylistRequest(t), !1
        });
        n.useRollovers && t.bind("mouseover",function (t) {
            if (!n._componentInited || n._playlistTransitionOn)return!1;
            t || (t = n._window.event);
            t.cancelBubble ? t.cancelBubble = !0 : t.stopPropagation && t.stopPropagation();
            t = e(t.currentTarget);
            t.attr("data-id");
            t.hasClass("playlistNonSelected") ? t.removeClass("playlistNonSelected").addClass("playlistSelected") : t.hasClass("playlistNonSelected_mob") && t.removeClass("playlistNonSelected_mob").addClass("playlistSelected_mob");
            return!1
        }).bind("mouseout", function (t) {
                if (!n._componentInited || n._playlistTransitionOn)return!1;
                t || (t = n._window.event);
                t.cancelBubble ? t.cancelBubble = !0 : t.stopPropagation && t.stopPropagation();
                t = e(t.currentTarget);
                if (t.attr("data-id") != n._playlistManager.getCounter())return t.hasClass("playlistSelected") ? t.removeClass("playlistSelected").addClass("playlistNonSelected") : t.hasClass("playlistSelected_mob") && t.removeClass("playlistSelected_mob").addClass("playlistNonSelected_mob"), !1
            })
    }, _buildPlaylist: function () {
        var t = this._videoProcessData.length, n = 0, r, i, s, o;
        if (this.getDeeplinkData) {
            this.dlink = this.baseURL + this.strict + this.firstLevel + "/";
            var u = this.categoryArr[this.activeCategory].mediaName
        }
        for (n; n < t; n++)o = this._videoProcessData[n], this._playlistLength += 1, i = this.mobileLayout ? e("<li/>").addClass("playlistNonSelected_mob").css({cursor: "pointer", display: "block"}) : e("<li/>").addClass("playlistNonSelected").css({cursor: "pointer", display: "block"}), this.preserveInsert_item ? (this.preserveInsert_item.after(i), this.preserveInsert_item = i) : (this._currentInsert.after(i), this._currentInsert = i), this._playlistArr[this._playlistLength - 1] = i, i.attr({"data-id": this._playlistLength - 1, "data-type": o.type, "data-path": o.id, "data-title": o.title ? o.title : "", "data-address": o.deeplink}), this._addPlaylistMouseEvents(i), this.autoMakePlaylistThumb ? (r = e("<div/>").addClass("playlistThumb").appendTo(i), o.thumbnail && (s = o.thumbnail, e(new Image).appendTo(r).attr("alt", o.title ? o.title : "").addClass("thumb").load(function () {
        }).error(function (e) {
            }).attr("src", s))) : this.currentThumb.length && this.currentThumb.appendTo(i), s = o.description ? o.description : "", this.autoMakePlaylistInfo ? (r = e('<p><span class="playlistTitle">' + (o.title ? o.title : "") + '</span><br><span class="playlistContent">' + s + "</span></p>"), r = e("<div/>").html(r).addClass("playlistInfo").appendTo(i).dotdotdot()) : this.currentInfo.length && this.currentInfo.appendTo(i).dotdotdot(), this._descriptionDataArr[this._playlistLength - 1] = s, this.useDeeplink && this.getDeeplinkData && (i = this.filterAllowedChars(o.deeplink), u.push(i));
        this._checkPlaylistProcess()
    }, _enableActiveItem: function () {
        if (-1 != this._playlistManager.getCounter()) {
            var t = e(this._playlistArr[this._playlistManager.getCounter()]);
            t && (t.css("cursor", "pointer"), t.hasClass("playlistSelected") ? t.removeClass("playlistSelected").addClass("playlistNonSelected") : t.hasClass("playlistSelected_mob") && t.removeClass("playlistSelected_mob").addClass("playlistNonSelected_mob"))
        }
    }, _disableActiveItem: function () {
        var t = e(this._playlistArr[this._playlistManager.getCounter()]);
        t && (t.css("cursor", "default"), t.hasClass("playlistNonSelected") ? t.removeClass("playlistNonSelected").addClass("playlistSelected") : t.hasClass("playlistNonSelected_mob") && t.removeClass("playlistNonSelected_mob").addClass("playlistSelected_mob"))
    }, _mediaAdvance: function () {
        this._enableActiveItem();
        this._playlistManager.advanceHandler(1, !0)
    }, _findMedia: function () {
        this._cleanMedia();
        this.activeItem = this._playlistArr[this._playlistManager.getCounter()];
        this._mediaPath = this.activeItem.attr("data-path");
        this._mediaType = this.activeItem.attr("data-type");
        if ("local" == this._mediaType)if (this._mediaPath = this.activeItem.attr("data-mp4"), this.autoPlay)this.html5Support ? (this._resizeControls(), this._initLocal()) : ("undefined" !== typeof this.getFlashMovie("flashPreview") && "undefined" !== typeof this.getFlashMovie("flashPreview").pb_play && this.getFlashMovie("flashPreview").pb_play(this._mediaPath, this.aspectRatio), this._resizeControls(), this.videoInited = !0); else if (this.html5Support)this.loadPreview(); else {
            var e = this.activeItem.attr("data-poster");
            "undefined" !== typeof this.getFlashMovie("flashPreview") && "undefined" !== typeof this.getFlashMovie("flashPreview").pb_loadPreview && this.getFlashMovie("flashPreview").pb_loadPreview(e)
        } else"vimeo" == this._mediaType ? this._initVimeo() : "youtube" == this._mediaType ? this._initYoutube() : alert("Wrong data-type in playlist!")
    }, _cleanMedia: function () {
        if ("local" == this._mediaType) {
            this.hideControls();
            if (this.html5Support) {
                if (this.videoUp2Js) {
                    this.videoUp2Js.pause();
                    try {
                        this.videoUp2Js.currentTime = 0
                    } catch (e) {
                    }
                    this.videoUp2Js.src = ""
                }
                this.video && this.video.unbind("ended loadedmetadata waiting playing play pause");
                this.mediaHolder.css("display", "none");
                !this.isMobile & this.html5Support && (this.mediaHolder.html(""), this.html5video_inited = !1)
            } else"undefined" !== typeof this.getFlashMovie("flashPreview") && "undefined" !== typeof this.getFlashMovie("flashPreview").pb_dispose && this.getFlashMovie("flashPreview").pb_dispose();
//      this.bigPlay && this.bigPlay.css("display", "none");
            this.mediaPreloader && this.mediaPreloader.css("display", "none");
            this.previewPoster && (this.previewPoster.remove(), this.previewPoster = null);
            this.resetData();
            this.videoInited = this.mediaPlaying = !1
        } else"vimeo" == this._mediaType ? this._vimeoPlayer && this._vimeoPlayer.clean() : "youtube" == this._mediaType && (this._youtubePlayer && this._youtubePlayer.stop(), this._hideYT())
    }, _setVolume: function () {
        "local" == this._mediaType ? (this.volume_level.width(this.defaultVolume * this.volumeSize), this.html5Support ? this.videoUp2Js.volume = this.defaultVolume : "undefined" !== typeof this.getFlashMovie("flashPreview") && "undefined" !== typeof this.getFlashMovie("flashPreview").pb_setVolume && this.getFlashMovie("flashPreview").pb_setVolume(this.defaultVolume)) : "vimeo" == this._mediaType ? this._vimeoPlayer && this._vimeoPlayer.setVolume(this.defaultVolume) : "youtube" == this._mediaType && this._youtubePlayer && this._youtubePlayer.setVolume(this.defaultVolume)
    }, _initLocal: function () {
        //this.loadPreview();
        this.bigPlay && this.bigPlay.css("display", "none");
        var e = this;
        console.log("--------", e.activeItem.find('.playlistTitle').text());
        $('.mediaPreview').trigger('loading', [e.activeItem.find('.playlistTitle').text()]);
        if (e.activeItem.attr("data-format") == 'Still Image') {
            setTimeout(function () {
                e.nextMedia();
            }, 1000)
        }
        this.mp4Support ? this._mediaPath = this.activeItem.attr("data-mp4") : this.vorbisSupport ? this._mediaPath = this.activeItem.attr("data-ogv") : this.webmSupport && (this._mediaPath = this.activeItem.attr("data-webm"));
        if (this.html5video_inited)this.mediaHolder.css("display", "block"), this.videoUp2Js.src = this._mediaPath, this.videoUp2Js.load(); else {
            var t = "";
            this.mp4Support ? (this.isAndroid ? t = t + '<video class="video_cont" width="100%" height="100%" >' + ('<source src="' + this._mediaPath + '" />') : (t += '<video class="video_cont" width="100%" height="100%" >', t += '<source src="' + this._mediaPath + '" type="video/mp4" />'), t += "</video>") : this.vorbisSupport ? (this.isAndroid ? (t += '<video class="video_cont" width="100%" height="100%" >', t += '<source src="' + this._mediaPath + '" />') : (t += '<video class="video_cont" width="100%" height="100%" >', t += '<source src="' + this._mediaPath + '" type="video/ogg" />'), t += "</video>") : this.webMsupport && (this.isAndroid ? (t += '<video class="video_cont" width="100%" height="100%" >', t += '<source src="' + this._mediaPath + '" />') : (t += '<video class="video_cont" width="100%" height="100%" >', t += '<source src="' + this._mediaPath + '" type="video/webm" />'), t += "</video>");
            this.mediaHolder.css("display", "block").html(t);
            this.video = this.mediaHolder.find(".video_cont");
            this.videoUp2Js = this.video[0]
        }
        this.videoUp2Js.volume = this.defaultVolume;
        window.___video_this = this;
        this.video.css("position", "absolute").bind("ended",function () {
            if (e._autoAdvanceToNextVideo)e._mediaAdvance(); else {
                try {
                    e.videoUp2Js.currentTime = 0
                } catch (t) {
                }
                e.videoUp2Js.paused && e.videoUp2Js.play();
                e.autoPlay || e.videoUp2Js.pause()
            }
        }).bind("loadedmetadata",function () {
                e.resizeVideo();
                e.dataIntervalID && clearInterval(e.dataIntervalID);
                e.dataIntervalID = setInterval(function () {
                    isNaN(e.videoUp2Js.currentTime) || isNaN(e.videoUp2Js.duration) || e.player_mediaTime.html(e.formatCurrentTime(e.videoUp2Js.currentTime) + e.formatDuration(e.videoUp2Js.duration));
                    if (!e.seekBarDown) {
                        e.progress_level.css("width", e.videoUp2Js.currentTime / e.videoUp2Js.duration * e.seekBarSize + "px");
                        try {
                            var t = Math.floor(e.videoUp2Js.buffered.end(0))
                        } catch (n) {
                        }
                        t /= Math.floor(e.videoUp2Js.duration);
                        isNaN(t) || e.load_level.css("width", t * e.seekBarSize + "px")
                    }
                }, e.dataInterval);
                e.videoUp2Js.play();
                e.videoInited = !0;
                e.isMobile && e.initialAutoplay && (e.autoPlay = !0);
                e.showControls();
                e.isIOS && e._resizeControls()
            }).bind("waiting",function () {
                e.mediaPreloader && e.mediaPreloader.css("display", "block")
            }).bind("playing",function () {
                e.mediaPreloader && e.mediaPreloader.css("display", "none")
            }).bind("play",function () {
                e.componentWrapper.find(".player_playControl").find("img").attr("src", e.ic_pause);
                e.bigPlay && e.bigPlay.css("display", "none");
                e.mediaPlaying = !0
            }).bind("pause",function () {
                e.componentWrapper.find(".player_playControl").find("img").attr("src", e.ic_play);
                e.bigPlay && e.bigPlay.css("display", "block");
                e.mediaPlaying = !1
            }).bind('loadeddata', function () {
                clearTimeout(e.timeout);
                e.togglePlayBack();
                t.bigPlay && t.bigPlay.css("display", "none");

                //$(".metadata-Overlay").css('display', 'block');
                //$(".metadata").css('display', 'block');
                e.timeout = setTimeout(function () {
                    e.mediaPreview.css('display', 'none');
                    //$(".metadata-Overlay").css('display', 'none');
                    //$(".metadata").css('display', 'none');
                    e.mediaPlaying || e.togglePlayBack();
                }, 5000);
            });
        this.isIOS && !this.html5video_inited ? (this.videoUp2Js.src = this._mediaPath, this.videoUp2Js.load()) : this.isAndroid && !this.html5video_inited && (this.videoUp2Js.play(), this.bigPlay && this.bigPlay.css("display", "none"), this.previewPoster && this.previewPoster.stop().animate({opacity: 0}, {duration: 500, easing: "easeOutSine", complete: function () {
            e.previewPoster.remove();
            e.previewPoster = null
        }}), this.videoInited = !0, this.showControls());
        this.html5video_inited = !0
    }, _initVimeo: function () {
        var t = this;
        this._vimeoInited ? this._vimeoPlayer.initVideo(this._mediaPath) : (this._vimeoPlayer = e.vimeoPlayer({autoPlay: this.vim_autoPlay, defaultVolume: this.defaultVolume, mediaPath: this._mediaPath, vimeoHolder: this.vimeoHolder, isMobile: this.isMobile, initialAutoplay: this.initialAutoplay}), e(this._vimeoPlayer).bind("ap_VimeoPlayer.VIMEO_READY", function () {
        }), e(this._vimeoPlayer).bind("ap_VimeoPlayer.START_PLAY", function () {
            t.mediaPlaying = !0
        }), e(this._vimeoPlayer).bind("ap_VimeoPlayer.VIMEO_PLAY", function () {
            t.mediaPlaying = !0
        }), e(this._vimeoPlayer).bind("ap_VimeoPlayer.VIMEO_PAUSE", function () {
            t.mediaPlaying = !1
        }), e(this._vimeoPlayer).bind("ap_VimeoPlayer.END_PLAY", function () {
            t._autoAdvanceToNextVideo ? t._mediaAdvance() : t.isMobile ? t.initialAutoplay && t._vimeoPlayer.play() : t.vim_autoPlay && t._vimeoPlayer.play()
        }), this._vimeoInited = !0)
    }, _initYoutube: function () {
        var t = this;
        t._showYT();
        this._youtubeInited ? this._youtubePlayer.initVideo(this._mediaPath) : (this._youtubePlayer = e.youtubePlayer({autoPlay: this.yt_autoPlay, defaultVolume: this.defaultVolume, mediaPath: this._mediaPath, youtubeHolder: this.youtubeHolder, youtubeChromeless: this._youtubeChromeless, isMobile: this.isMobile, initialAutoplay: this.initialAutoplay, quality: this.useYoutubeHighestQuality}), e(this._youtubePlayer).bind("ap_YoutubePlayer.FORCE_MAIN_STOP", function () {
            t._hideYT()
        }), e(this._youtubePlayer).bind("ap_YoutubePlayer.YT_READY", function () {
        }), e(this._youtubePlayer).bind("ap_YoutubePlayer.START_PLAY", function () {
            t.mediaPlaying = !0
        }), e(this._youtubePlayer).bind("ap_YoutubePlayer.STATE_PLAYING", function () {
            t.mediaPlaying = !0
        }), e(this._youtubePlayer).bind("ap_YoutubePlayer.STATE_PAUSED", function () {
            t.mediaPlaying = !1
        }), e(this._youtubePlayer).bind("ap_YoutubePlayer.END_PLAY", function () {
            t._autoAdvanceToNextVideo ? t._mediaAdvance() : t.isMobile ? t.initialAutoplay && t._youtubePlayer.play() : t.yt_autoPlay && t._youtubePlayer.play()
        }), this._youtubeInited = !0)
    }, _showYT: function () {
        this.isIE ? this._setYTSizeIE() : this.youtubeHolder.css("left", "0px")
    }, _setYTSizeIE: function () {
        if (this.isIE) {
            var e = this._getPlayerSize("w"), t = this._getPlayerSize("h");
            this.youtubeHolder.css({width: e + 2 + "px", height: t + 2 + "px", left: "-1px", top: "-1px"})
        }
    }, _hideYT: function () {
        this.youtubeHolder.css("left", "-10000px")
    }, _getComponentSize: function (e) {
        return"w" == e ? "normal" == this.componentSize ? this.componentWrapper.width() : this.getDocumentWidth() : "normal" == this.componentSize ? this.componentWrapper.height() : this.getDocumentHeight()
    }, _getPlayerSize: function (e) {
        return"w" == e ? this.playerHolder.width() : this.playerHolder.height()
    }, getDocumentWidth: function () {
        return Math.max(e(window).width(), document.documentElement.clientWidth)
    }, getDocumentHeight: function () {
        return Math.max(e(window).height(), document.documentElement.clientHeight)
    }, _preventSelect: function (t) {
        e(t).each(function () {
            e(this).attr("unselectable", "on").css({"-moz-user-select": "none", "-webkit-user-select": "none", "user-select": "none"}).each(function () {
                this.onselectstart = function () {
                    return!1
                }
            })
        })
    }, _doneResizing: function () {
        "fullscreen" == this.componentSize && this.resizeComponent();
        this._componentWidth = this._getComponentSize("w");
        this._componentHeight = this._getComponentSize("h");
        if (this.fullSize)"right" == this.playlistPosition ? this._componentWidth <= this.widthSizeLimit ? (this.playlistHolder.css({width: "112px"}), this.componentPlaylist.css({width: "102px", height: this._componentHeight - 10 + "px"}), this.playerHolder.css({width: this._componentWidth - this.playlistHolder.width() + "px"})) : (this.playlistHolder.css({width: this.playlistHolderOrigW + "px"}), this.componentPlaylist.css({width: this.playlistHolderOrigW - 10 + "px", height: this._componentHeight - 10 + "px"}), this.playerHolder.css({width: this._componentWidth - this.playlistHolderOrigW + "px"})) : "bottom" == this.playlistPosition && (this.playerHolder.css({height: this._componentHeight - this.playlistHolderOrigH + "px"}), this.componentPlaylist.css({width: this._componentWidth - 10 + "px"})); else if ("right" == this.playlistPosition)if (this.componentInnerWrapperOrigW >= this._componentWidth || this.componentInnerWrapperOrigH >= this._componentHeight) {
            var e = this.retrieveObjectRatio2(!0, this.playerHolder.width(), this.playerHolder.height());
            this._componentWidth <= this.widthSizeLimit || this._componentHeight <= this.heightSizeLimit ? (this.playlistHolder.css({height: e.height + "px", width: "112px"}), this.componentPlaylist.css({height: e.height - 10 + "px", width: "102px"})) : (this.playlistHolder.css({height: e.height + "px", width: this.playlistHolderOrigW + "px"}), this.componentPlaylist.css({height: e.height - 10 + "px", width: this.playlistHolderOrigW - 10 + "px"}));
            this.componentInnerWrapperCurrW = e.width + this.playlistHolder.width();
            this.componentInnerWrapperCurrH = e.height;
            this.playerHolderCurrW = e.width;
            this.playerHolderCurrH = e.height;
            this.componentInnerWrapper.css({width: this.componentInnerWrapperCurrW + "px", marginLeft: -this.componentInnerWrapperCurrW / 2 + "px", height: this.componentInnerWrapperCurrH + "px", marginTop: -this.componentInnerWrapperCurrH / 2 + "px"});
            this.playerHolder.css({width: e.width + "px", height: e.height + "px"})
        } else this.componentInnerWrapperCurrW = this.componentInnerWrapperOrigW, this.componentInnerWrapperCurrH = this.componentInnerWrapperOrigH, this.playerHolderCurrW = this.playerHolderOrigW, this.playerHolderCurrH = this.playerHolderOrigH, this.componentInnerWrapper.css({width: this.componentInnerWrapperOrigW + "px", marginLeft: -this.componentInnerWrapperOrigW / 2 + "px", height: this.componentInnerWrapperOrigH + "px", marginTop: -this.componentInnerWrapperOrigH / 2 + "px"}), this.playerHolder.css({width: this.playerHolderOrigW + "px", height: this.playerHolderOrigH + "px"}), this.playlistHolder.css({height: this.playerHolderCurrH + "px", width: this.playlistHolderOrigW + "px"}), this.componentPlaylist.css({height: this.playerHolderCurrH - 10 + "px", width: this.playlistHolderOrigW - 10 + "px"}); else"bottom" == this.playlistPosition && (this.componentInnerWrapperOrigW >= this._componentWidth || this.componentInnerWrapperOrigH >= this._componentHeight ? (e = this.retrieveObjectRatio2(!0, this.playerHolder.width(), this.playerHolder.height()), this.componentInnerWrapperCurrW = e.width, this.componentInnerWrapperCurrH = e.height + this.playlistHolder.height(), this.playerHolderCurrW = e.width, this.playerHolderCurrH = e.height, this.componentInnerWrapper.css({width: e.width + "px", marginLeft: -e.width / 2 + "px", height: e.height + this.playlistHolder.height() + "px", marginTop: -(e.height + this.playlistHolder.height()) / 2 + "px"}), this.playerHolder.css({width: e.width + "px", height: e.height + "px"}), this.playlistHolder.css({width: e.width + "px"}), this.componentPlaylist.css({width: e.width - 10 + "px"})) : (this.componentInnerWrapperCurrW = this.componentInnerWrapperOrigW, this.componentInnerWrapperCurrH = this.componentInnerWrapperOrigH, this.playerHolderCurrW = this.componentInnerWrapperOrigW, this.playerHolderCurrH = this.playerHolderOrigH, this.componentInnerWrapper.css({width: this.componentInnerWrapperOrigW + "px", marginLeft: -this.componentInnerWrapperOrigW / 2 + "px", height: this.componentInnerWrapperOrigH + "px", marginTop: -this.componentInnerWrapperOrigH / 2 + "px"}), this.playerHolder.css({width: this.componentInnerWrapperOrigW + "px", height: this.playerHolderOrigH + "px"}), this.playlistHolder.css({width: this.componentInnerWrapperOrigW + "px"}), this.componentPlaylist.css({width: this.componentInnerWrapperOrigW - 10 + "px"})));
        this._mediaType && ("local" == this._mediaType ? (this.previewPoster && this.resizePreview(), this.html5Support && this.videoInited && this.resizeComponent(), this._resizeControls()) : "youtube" == this._mediaType && this.isIE && this._setYTSizeIE());
        this._checkPlaylistSize()
    }, _resizeControls: function () {
        window.____resizeControls = function(){
            if (this.fullSize)"right" == this.playlistPosition ? e = "normal" == this.componentSize ? this._getComponentSize("w") - this.playlistHolder.width() : this._getComponentSize("w") : "bottom" == this.playlistPosition && (e = this._getComponentSize("w")); else var e = "normal" == this.componentSize ? this._getComponentSize("w") < this.playerHolderCurrW ? this._getComponentSize("w") : this.playerHolderCurrW : this._getComponentSize("w");
            this.playerControls.width(e - this.controlsMediaWidthDiff);
            this.controlsSeekbarDiff = this._getControlsSeekbarDiff();
            this.seekBarSize = this.playerControls.width() - this.controlsSeekbarDiff;
            this.progress_bg.width(this.seekBarSize);
            this.player_progress.width(this.seekBarSize + 20);
            if (!this.html5Support) {
                var t = e - this.controlsMediaWidthDiff, n = t - this.controlsSeekbarDiff;
                "undefined" !== typeof this.getFlashMovie("flashPreview") && "undefined" !== typeof this.getFlashMovie("flashPreview").pb_resizeControls && this.getFlashMovie("flashPreview").pb_resizeControls(t, n)
            }
            400 >= e ? (this.player_mediaTime.css("display", "none"), this.noTime = !0, this.controlsSeekbarDiff = this._getControlsSeekbarDiff(), this.seekBarSize = this.playerControls.width() - this.controlsSeekbarDiff, this.progress_bg.width(this.seekBarSize), this.player_progress.width(this.seekBarSize + 20), this.html5Support || "undefined" !== typeof this.getFlashMovie("flashPreview") && "undefined" !== typeof this.getFlashMovie("flashPreview").pb_hideTime && this.getFlashMovie("flashPreview").pb_hideTime(this.seekBarSize, this.controlsSeekbarDiff)) : (this.player_mediaTime.css("display", "block"), this.noTime = !1, this.controlsSeekbarDiff = this._getControlsSeekbarDiff(), this.seekBarSize = this.playerControls.width() - this.controlsSeekbarDiff, this.progress_bg.width(this.seekBarSize), this.player_progress.width(this.seekBarSize + 20), this.html5Support || "undefined" !== typeof this.getFlashMovie("flashPreview") && "undefined" !== typeof this.getFlashMovie("flashPreview").pb_showTime && this.getFlashMovie("flashPreview").pb_showTime(this.seekBarSize, this.controlsSeekbarDiff))
        };
        ____resizeControls.apply(this);
        ____resizeControlsThis = this;
        }, _getControlsSeekbarDiff: function () {
        var e;
        if (this.noFS)t = 280 - this.no_fs_move, n = 195 - this.no_fs_move, r = 180 - this.no_fs_move, i = 95 - this.no_fs_move; else var t = 280, n = 195, r = 180, i = 95;
        this.noVolume && !this.noTime ? e = r : !this.noVolume && this.noTime ? e = n : this.noVolume && this.noTime ? e = i : this.noVolume || this.noTime || (e = t);
        return e
    }, _checkPlaylistSize: function () {
        if (!this.fullSize)if (this._componentWidth <= this.widthSizeLimit || this._componentHeight <= this.heightSizeLimit) {
            var e = 0, t = this._playlistArr.length, n;
            for (e; e < t; e++)(n = this._playlistArr[e]) && n.removeClass("playlistSelected_mob").removeClass("playlistNonSelected_mob").removeClass("playlistSelected").removeClass("playlistNonSelected").addClass("playlistNonSelected_mob");
            this._playlistArr[this._playlistManager.getCounter()] && this._playlistArr[this._playlistManager.getCounter()].addClass("playlistSelected_mob")
        } else {
            e = 0;
            t = this._playlistArr.length;
            for (e; e < t; e++)(n = this._playlistArr[e]) && n.removeClass("playlistSelected_mob").removeClass("playlistNonSelected_mob").removeClass("playlistSelected").removeClass("playlistNonSelected").addClass("playlistNonSelected");
            this._playlistArr[this._playlistManager.getCounter()] && this._playlistArr[this._playlistManager.getCounter()].addClass("playlistSelected")
        } else if ("right" == this.playlistPosition)if (this._componentWidth <= this.widthSizeLimit) {
            e = 0;
            t = this._playlistArr.length;
            for (e; e < t; e++)(n = this._playlistArr[e]) && n.removeClass("playlistSelected_mob").removeClass("playlistNonSelected_mob").removeClass("playlistSelected").removeClass("playlistNonSelected").addClass("playlistNonSelected_mob");
            this._playlistArr[this._playlistManager.getCounter()] && this._playlistArr[this._playlistManager.getCounter()].addClass("playlistSelected_mob")
        } else {
            e = 0;
            t = this._playlistArr.length;
            for (e; e < t; e++)(n = this._playlistArr[e]) && n.removeClass("playlistSelected_mob").removeClass("playlistNonSelected_mob").removeClass("playlistSelected").removeClass("playlistNonSelected").addClass("playlistNonSelected");
            this._playlistArr[this._playlistManager.getCounter()] && this._playlistArr[this._playlistManager.getCounter()].addClass("playlistSelected")
        } else if ("bottom" == this.playlistPosition)if (this._componentWidth <= this.widthSizeLimit) {
            e = 0;
            t = this._playlistArr.length;
            for (e; e < t; e++)(n = this._playlistArr[e]) && n.removeClass("playlistSelected_mob").removeClass("playlistNonSelected_mob").removeClass("playlistSelected").removeClass("playlistNonSelected").addClass("playlistNonSelected_mob");
            this._playlistArr[this._playlistManager.getCounter()] && this._playlistArr[this._playlistManager.getCounter()].addClass("playlistSelected_mob")
        } else {
            e = 0;
            t = this._playlistArr.length;
            for (e; e < t; e++)(n = this._playlistArr[e]) && n.removeClass("playlistSelected_mob").removeClass("playlistNonSelected_mob").removeClass("playlistSelected").removeClass("playlistNonSelected").addClass("playlistNonSelected");
            this._playlistArr[this._playlistManager.getCounter()] && this._playlistArr[this._playlistManager.getCounter()].addClass("playlistSelected")
        }
        this._checkScroll(0)
    }, retrieveObjectRatio2: function (e, t, n) {
        var r = this._componentWidth <= this.widthSizeLimit || this._componentHeight <= this.heightSizeLimit ? "vertical" == this._thumbOrientation ? 112 : 0 : "vertical" == this._thumbOrientation ? this.playlistHolderOrigW : 0, i = "horizontal" == this._thumbOrientation ? this.playlistHolder.height() : 0, s = this._getComponentSize("w"), o = this._getComponentSize("h"), u = {}, a = (s - r) / (o - i), f = this.playerRatio;
        f < a ? e ? (u.width = (o - i) / n * t, u.height = o - i) : (u.height = (s - r) / t * n, u.width = s - r) : f > a ? e ? (u.height = (s - r) / t * n, u.width = s - r) : (u.width = (o - i) / n * t, u.height = o - i) : (u.width = s - r, u.height = o - i);
        return u
    }};
    e.fn.videoGallery = function (r) {
        return this.each(function () {
            e.fn.videoGallery.playMedia = function () {
                i.playMedia()
            };
            e.fn.videoGallery.pauseMedia = function () {
                i.pauseMedia()
            };
            e.fn.videoGallery.nextMedia = function () {
                i.nextMedia()
            };
            e.fn.videoGallery.previousMedia = function () {
                i.previousMedia()
            };
            e.fn.videoGallery.destroyMedia = function () {
                i.destroyMedia()
            };
            e.fn.videoGallery.setVolume = function (e) {
                i.setVolume(e)
            };
            e.fn.videoGallery.loadMedia = function (e) {
                i.loadMedia(e)
            };
            e.fn.videoGallery.getDescription = function (e) {
                return i.getDescription(e)
            };
            e.fn.videoGallery.flashResizeControls = function () {
                i.flashResizeControls()
            };
            e.fn.videoGallery.flashMainPreviewOff = function () {
                i.flashMainPreviewOff()
            };
            e.fn.videoGallery.flashVideoPause = function () {
                i.flashVideoPause()
            };
            e.fn.videoGallery.flashVideoResume = function () {
                i.flashVideoResume()
            };
            e.fn.videoGallery.flashVideoEnd = function () {
                i.flashVideoEnd()
            };
            e.fn.videoGallery.flashVideoStart = function () {
                i.flashVideoStart()
            };
            e.fn.videoGallery.dataUpdateFlash = function () {
                i.dataUpdateFlash(bl, bt, t, d)
            };
            e.fn.videoGallery.loadPreview = function () {
                i.loadPreview();
            };
            var i = new n(e(this), r);
            e(this).data("videoGallery", i)
        })
    };
    e.fn.videoGallery.defaults = {defaultVolume: .5, autoPlay: !1, loopingOn: !0, randomPlay: !1, autoAdvanceToNextVideo: !0, autoMakePlaylistThumb: !0, autoMakePlaylistInfo: !0, outputPlaylistData: !1, videoGallerySetupDone: function () {
    }};
    e.fn.videoGallery.settings = {}
})(jQuery)